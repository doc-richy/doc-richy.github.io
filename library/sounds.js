let b=new AudioContext,e=[];function t(t){"suspended"===(b=t).state&&b.resume()}"suspended"===b.state&&b.resume();class i{constructor(t,e){this.source=t,this.loadHandler=e,this.actx=b,this.volumeNode=this.actx.createGain(),this.panNode=this.actx.createStereoPanner(),this.convolverNode=this.actx.createConvolver(),this.delayNode=this.actx.createDelay(),this.feedbackNode=this.actx.createGain(),this.filterNode=this.actx.createBiquadFilter(),this.soundNode=null,this.buffer=null,this.loop=!1,this.playing=!1,this.panValue=0,this.volumeValue=1,this.startTime=0,this.startOffset=0,this.playbackRate=1,this.randomPitch=!0,this.reverb=!1,this.reverbImpulse=null,this.echo=!1,this.delayValue=.3,this.feebackValue=.3,this.filterValue=0,this.load()}load(){let t=new XMLHttpRequest;t.open("GET",this.source,!0),t.responseType="arraybuffer",t.addEventListener("load",()=>{this.actx.decodeAudioData(t.response,t=>{this.buffer=t,this.hasLoaded=!0,this.loadHandler&&this.loadHandler()},t=>{throw new Error("Audio could not be decoded: "+t)})}),t.send()}setActx(t){this.actx=t}play(){this.startTime=this.actx.currentTime,this.soundNode=this.actx.createBufferSource(),this.soundNode.buffer=this.buffer,this.soundNode.connect(this.volumeNode),!1===this.reverb?this.volumeNode.connect(this.panNode):(this.volumeNode.connect(this.convolverNode),this.convolverNode.connect(this.panNode),this.convolverNode.buffer=this.reverbImpulse),this.panNode.connect(this.actx.destination),this.echo&&(this.feedbackNode.gain.value=this.feebackValue,this.delayNode.delayTime.value=this.delayValue,this.filterNode.frequency.value=this.filterValue,this.delayNode.connect(this.feedbackNode),(0<this.filterValue?(this.feedbackNode.connect(this.filterNode),this.filterNode):this.feedbackNode).connect(this.delayNode),this.volumeNode.connect(this.delayNode),this.delayNode.connect(this.panNode)),this.soundNode.loop=this.loop,this.soundNode.playbackRate.value=this.playbackRate,this.soundNode.start(this.startTime,this.startOffset%this.buffer.duration),this.playing=!0}setReverb(t=2,e=2,i=!1){this.reverbImpulse=g(t,e,i),this.reverb=!0}setEcho(t=.3,e=.3,i=0){this.delayValue=t,this.feebackValue=e,this.filterValue=i,this.echo=!0}pause(){this.playing&&(this.soundNode.stop(this.actx.currentTime),this.startOffset+=this.actx.currentTime-this.startTime,this.playing=!1)}restart(){this.playing&&this.soundNode.stop(this.actx.currentTime),this.startOffset=0,this.startPoint=0,this.endPoint=this.buffer.duration,this.play()}playFrom(t){this.playing&&this.soundNode.stop(this.actx.currentTime),this.startOffset=t,this.play()}playSection(t,e){this.playing&&this.soundNode.stop(this.actx.currentTime),0===this.startOffset&&(this.startOffset=t),this.startTime=this.actx.currentTime,this.soundNode=this.actx.createBufferSource(),this.soundNode.buffer=this.buffer,this.soundNode.connect(this.panNode),this.panNode.connect(this.volumeNode),this.volumeNode.connect(this.actx.destination),this.soundNode.loop=this.loop,this.soundNode.loopStart=t,this.soundNode.loopEnd=e,this.soundNode.start(this.startTime,this.startOffset%this.buffer.duration,e-t),this.playing=!0}get volume(){return this.volumeValue}set volume(t){this.volumeNode.gain.value=t,this.volumeValue=t}get pan(){return this.panNode.pan.value}set pan(t){this.panNode.pan.value=t}}function a(t,e){return new i(t,e)}function s(t,i=0,a=1,e="sine",s=1,n=0,h=0,o=0,c=!1,r=0,u=0,l=void 0,d=void 0){let m=b.createOscillator(),f=b.createGain(),v=b.createStereoPanner();m.connect(f),f.connect(v),v.connect(b.destination),f.gain.value=s,v.pan.value=n,m.type=e;let p;if(p=0<r?(n=t-r/2,e=t+r/2,Math.floor(Math.random()*(e-n+1))+n):t,m.frequency.value=p,0<i&&x(f),0<a&&V(f),0<o&&q(m),l&&T(f),d&&y(f),0<u){r=b.createOscillator(),e=b.createOscillator(),n=b.createGain(),t=b.createGain();n.gain.value=s,t.gain.value=s,r.connect(n),n.connect(b.destination),e.connect(t),t.connect(b.destination),r.type="sawtooth",e.type="sawtooth",r.frequency.value=p+u,e.frequency.value=p-u,0<i&&(x(n),x(t)),0<a&&(V(n),V(t)),0<o&&(q(r),q(e)),l&&(T(n),T(t)),d&&(y(n),y(t)),N(r),N(e)}function y(t){var e=b.createConvolver();e.buffer=g(d[0],d[1],d[2]),t.connect(e),e.connect(v)}function T(t){var e=b.createGain(),i=b.createDelay(),a=b.createBiquadFilter();i.delayTime.value=l[0],e.gain.value=l[1],l[2]&&(a.frequency.value=l[2]),i.connect(e),(l[2]?(e.connect(a),a):e).connect(i),t.connect(i),i.connect(v)}function x(t){t.gain.value=0,t.gain.linearRampToValueAtTime(0,b.currentTime+h),t.gain.linearRampToValueAtTime(s,b.currentTime+h+i)}function V(t){t.gain.linearRampToValueAtTime(s,b.currentTime+i+h),t.gain.linearRampToValueAtTime(0,b.currentTime+h+i+a)}function q(t){var e=t.frequency.value;c?(t.frequency.linearRampToValueAtTime(e,b.currentTime+h),t.frequency.linearRampToValueAtTime(e+o,b.currentTime+h+i+a)):(t.frequency.linearRampToValueAtTime(e,b.currentTime+h),t.frequency.linearRampToValueAtTime(e-o,b.currentTime+h+i+a))}function N(t){console.log("IN play state ",t),t.start(b.currentTime+h)}N(m)}class n{constructor(){this.actx=b,this.oscillator=this.actx.createOscillator(),this.volume=this.actx.createGain(),this.pan=this.actx.createStereoPanner(),this.oscillator.connect(this.volume),this.volume.connect(this.pan),this.pan.connect(this.actx.destination),this.volume.gain.value=0,this.oscillator.start(),this.isStarted=!1}setParametersAndStart=(t=0,e=0,i=1,a="sine",s=1,n=0,h=0,o=0,c=!1,r=0,u=0,l=void 0,d=void 0)=>{this.frequencyValue=t,this.attack=e,this.decay=i,this.type=a,this.volumeValue=s,this.panValue=n,this.wait=h,this.pitchBendAmount=o,this.reverse=c,this.randomValue=r,this.dissonance=u,this.echo=l,this.reverb=d};startOsc=()=>{this.volume.gain.value=this.volumeValue,this.pan.pan.value=this.panValue,this.oscillator.type=this.type,this.frequency=void 0,this.randomInt=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,0<this.randomValue?this.frequency=this.randomInt(this.frequencyValue-this.randomValue/2,this.frequencyValue+this.randomValue/2):this.frequency=this.frequencyValue,this.oscillator.frequency.value=this.frequency,0<this.attack&&this.fadeIn(this.volume),0<this.decay&&this.fadeOut(this.volume),0<this.pitchBendAmount&&this.pitchBend(this.oscillator),this.echo&&this.addEcho(this.volume),this.reverb&&this.addReverb(this.volume),0<this.dissonance&&this.addDissonance(),this.isStarted=!0};stopOsc=()=>{this.volume.gain.value=0,this.isStarted=!1};addReverb=t=>{var e=this.actx.createConvolver();e.buffer=g(this.reverb[0],this.reverb[1],this.reverb[2]),this.volumeNode.connect(e),e.connect(this.pan)};addEcho=t=>{var e=this.actx.createGain(),i=this.actx.createDelay(),a=this.actx.createBiquadFilter();i.delayTime.value=this.echo[0],e.gain.value=this.echo[1],this.echo[2]&&(a.frequency.value=this.echo[2]),i.connect(e),(this.echo[2]?(e.connect(a),a):e).connect(i),t.connect(i),i.connect(this.pan)};fadeIn=t=>{t.gain.value=0,t.gain.linearRampToValueAtTime(0,this.actx.currentTime+this.wait),t.gain.linearRampToValueAtTime(this.volumeValue,this.actx.currentTime+this.wait+this.attack)};fadeOut=t=>{t.gain.linearRampToValueAtTime(this.volumeValue,this.actx.currentTime+this.attack+this.wait),t.gain.linearRampToValueAtTime(0,this.actx.currentTime+this.wait+this.attack+this.decay)};pitchBend=t=>{t.frequency.value;this.reverse?(t.frequency.linearRampToValueAtTime(this.frequency,this.actx.currentTime+this.wait),t.frequency.linearRampToValueAtTime(this.frequency+this.pitchBendAmount,this.actx.currentTime+this.wait+this.attack+this.decay)):(t.frequency.linearRampToValueAtTime(this.frequency,this.actx.currentTime+this.wait),t.frequency.linearRampToValueAtTime(this.frequency-this.pitchBendAmount,this.actx.currentTime+this.wait+this.attack+this.decay))};addDissonance=()=>{var t=this.actx.createOscillator(),e=this.actx.createOscillator(),i=this.actx.createGain(),a=this.actx.createGain();i.gain.value=this.volumeValue,a.gain.value=this.volumeValue,t.connect(i),i.connect(this.actx.destination),e.connect(a),a.connect(this.actx.destination),t.type="sawtooth",e.type="sawtooth",t.frequency.value=this.frequency+this.dissonance,e.frequency.value=this.frequency-this.dissonance,0<this.attack&&(this.fadeIn(i),this.fadeIn(a)),0<this.decay&&(this.fadeOut(i),this.fadeOut(a)),0<this.pitchBendAmount&&(this.pitchBend(t),this.pitchBend(e)),this.echo&&(this.addEcho(i),this.addEcho(a)),this.reverb&&(this.addReverb(i),this.addReverb(a)),this.playNode(t),this.playNode(e)};playNode=t=>{t.start(this.actx.currentTime+this.wait),t.onended=function(){}};play=()=>{this.oscillator=this.actx.createOscillator(),this.volume=this.actx.createGain(),this.pan=this.actx.createStereoPanner(),this.oscillator.connect(this.volume),this.volume.connect(this.pan),this.pan.connect(this.actx.destination),this.volume.gain.value=this.volumeValue,this.pan.pan.value=this.panValue,this.oscillator.type=this.type,this.frequency=void 0,this.randomInt=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,0<this.randomValue?this.frequency=this.randomInt(this.frequencyValue-this.randomValue/2,this.frequencyValue+this.randomValue/2):this.frequency=this.frequencyValue,this.oscillator.frequency.value=this.frequency,0<this.attack&&this.fadeIn(this.volume),0<this.decay&&this.fadeOut(this.volume),0<this.pitchBendAmount&&this.pitchBend(this.oscillator),this.echo&&this.addEcho(this.volume),this.reverb&&this.addReverb(this.volume),0<this.dissonance&&this.addDissonance(),this.oscillator.start(this.actx.currentTime+this.wait),this.oscillator.onended=()=>{this.oscillator.stop()}}}function h(){return new n}let o=[];for(let t=0;t<5;t++){var c=new n;o.push(c)}class m{constructor(t,e=0,i=1,a="sine",s=1,n=0,h=0,o=0,c=!1,r=0,u=0,l=void 0,d=void 0){this.frequencyValue=t,this.attack=e,this.decay=i,this.type=a,this.volumeValue=s,this.panValue=n,this.wait=h,this.pitchBendAmount=o,this.reverse=c,this.randomValue=r,this.dissonance=u,this.echo=l,this.reverb=d,this.actx=b,this.d1=void 0,this.d2=void 0}addReverb=t=>{var e=this.actx.createConvolver();e.buffer=g(this.reverb[0],this.reverb[1],this.reverb[2]),this.volumeNode.connect(e),e.connect(this.pan)};addEcho=t=>{var e=this.actx.createGain(),i=this.actx.createDelay(),a=this.actx.createBiquadFilter();i.delayTime.value=this.echo[0],e.gain.value=this.echo[1],this.echo[2]&&(a.frequency.value=this.echo[2]),i.connect(e),(this.echo[2]?(e.connect(a),a):e).connect(i),t.connect(i),i.connect(this.pan)};fadeIn=t=>{t.gain.value=0,t.gain.linearRampToValueAtTime(0,this.actx.currentTime+this.wait),t.gain.linearRampToValueAtTime(this.volumeValue,this.actx.currentTime+this.wait+this.attack)};fadeOut=t=>{t.gain.linearRampToValueAtTime(this.volumeValue,this.actx.currentTime+this.attack+this.wait),t.gain.linearRampToValueAtTime(0,this.actx.currentTime+this.wait+this.attack+this.decay)};pitchBend=t=>{t.frequency.value;this.reverse?(t.frequency.linearRampToValueAtTime(this.frequency,this.actx.currentTime+this.wait),t.frequency.linearRampToValueAtTime(this.frequency+this.pitchBendAmount,this.actx.currentTime+this.wait+this.attack+this.decay)):(t.frequency.linearRampToValueAtTime(this.frequency,this.actx.currentTime+this.wait),t.frequency.linearRampToValueAtTime(this.frequency-this.pitchBendAmount,this.actx.currentTime+this.wait+this.attack+this.decay))};addDissonance=()=>{var t=this.actx.createOscillator(),e=this.actx.createOscillator(),i=this.actx.createGain(),a=this.actx.createGain();i.gain.value=this.volumeValue,a.gain.value=this.volumeValue,t.connect(i),i.connect(this.actx.destination),e.connect(a),a.connect(this.actx.destination),t.type="sawtooth",e.type="sawtooth",t.frequency.value=this.frequency+this.dissonance,e.frequency.value=this.frequency-this.dissonance,0<this.attack&&(this.fadeIn(i),this.fadeIn(a)),0<this.decay&&(this.fadeOut(i),this.fadeOut(a)),0<this.pitchBendAmount&&(this.pitchBend(t),this.pitchBend(e)),this.echo&&(this.addEcho(i),this.addEcho(a)),this.reverb&&(this.addReverb(i),this.addReverb(a)),this.d1=t,this.d2=e};playNode=t=>{t.start(this.actx.currentTime+this.wait),t.stop(this.actx.currentTime+this.wait+2),t.onended=function(){console.log("ENDED on osc node")}};play=()=>{this.oscillator=this.actx.createOscillator(),this.volume=this.actx.createGain(),this.pan=this.actx.createStereoPanner(),this.oscillator.connect(this.volume),this.volume.connect(this.pan),this.pan.connect(this.actx.destination),this.volume.gain.value=this.volumeValue,this.pan.pan.value=this.panValue,this.oscillator.type=this.type,this.frequency=void 0,this.randomInt=(t,e)=>Math.floor(Math.random()*(e-t+1))+t,0<this.randomValue?this.frequency=this.randomInt(this.frequencyValue-this.randomValue/2,this.frequencyValue+this.randomValue/2):this.frequency=this.frequencyValue,this.oscillator.frequency.value=this.frequency,0<this.attack&&this.fadeIn(this.volume),0<this.decay&&this.fadeOut(this.volume),0<this.pitchBendAmount&&this.pitchBend(this.oscillator),this.echo&&this.addEcho(this.volume),this.reverb&&this.addReverb(this.volume),0<this.dissonance&&this.addDissonance(),this.oscillator.start(this.actx.currentTime+this.wait),this.oscillator.onended=()=>{this.oscillator.stop()}}}function r(t,e=0,i=1,a="sine",s=1,n=0,h=0,o=0,c=!1,r=0,u=0,l=void 0,d=void 0){return new m(t,e,i,a,s,n,h,o,c,r,u,l,d)}function g(t=2,i=2,a=!1){var s=b.sampleRate*t,t=b.createBuffer(2,s,b.sampleRate),n=t.getChannelData(0),h=t.getChannelData(1);for(let e=0;e<s;e++){let t;t=a?s-e:e,n[e]=(2*Math.random()-1)*Math.pow(1-t/s,i),h[e]=(2*Math.random()-1)*Math.pow(1-t/s,i)}return t}function u(i){if(0===i.length)throw new Error("Array to play sounds must be greater than 0.");let a=!0;for(let e=0;e<i.length;e++)for(let t=0;t<13;t++)[0,1,2,4,5,6,7,9,10].includes(t)?"number"!=typeof i[e][t]&&(a=!1):[3].includes(t)?["sine","triangle","square","sawtooth"].includes(i[e][t])||(a=!1):[8].includes(t)?"boolean"!=typeof i[e][t]&&(a=!1):[11,12].includes(t)&&void 0!==i[e][t]&&i[e][t].constructor!==Array&&(a=!1);if(!a)throw new Error("Some sounds can not be played. Check the array");i.forEach(t=>s(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12]))}let l=[];function d(t,e=0,i){return}function f(i){if(0===i.length)throw new Error("Array to play sounds must be greater than 0.");var t=[],a=[];let s=0;for(let e=0;e<i.length;e++){a=[];for(let t=0;t<13;t++)[0,1,2,4,5,6,7,9,10].includes(t)?(a.push(+i[e][t]),6===t&&(s=Math.max(s,i[e][t]))):[11,12].includes(t)?a.push([void 0,null,"undefined","u","null"].includes(i[e][t])?void 0:JSON.parse(i[e][t])):[8].includes(t)?a.push(!![!0,"true","yes","t","y"].includes(i[e][t])):[3].includes(t)&&a.push(["sine","triangle","square","sawtooth"].includes(i[e][t])?i[e][t]:"sine");13===a.length&&t.push(a)}let n=[];t.forEach((t,e)=>{t=r(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12]);n.push(t)}),e.push(n)}function v(i){if(0===i.length)throw new Error("Array to play sounds must be greater than 0.");o.forEach(t=>t.isStarted?t.stopOsc():null);var t=[],a=[];let s=0;for(let e=0;e<i.length;e++){a=[];for(let t=0;t<13;t++)[0,1,2,4,5,6,7,9,10].includes(t)?(a.push(+i[e][t]),6===t&&(s=Math.max(s,i[e][t]))):[11,12].includes(t)?a.push([void 0,null,"undefined","u","null"].includes(i[e][t])?void 0:JSON.parse(i[e][t])):[8].includes(t)?a.push(!![!0,"true","yes","t","y"].includes(i[e][t])):[3].includes(t)&&a.push(["sine","triangle","square","sawtooth"].includes(i[e][t])?i[e][t]:"sine");13===a.length&&t.push(a)}t.forEach((t,e)=>{o[e].setParametersAndStart(t[0],t[1],t[2],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12]),o[e].startOsc()})}export{b as actx,e as soundsArrayGlobal,t as setActx,a as makeSound,s as soundEffect,h as makeOneOscillator,o as osc,r as makeSoundEffectClass,u as playAll,l as intervalId,d as playAllNoneTransform,f as addSoundsArray,v as playSoundsArray};